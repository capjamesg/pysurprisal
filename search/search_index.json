{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Surprisal \ud83c\udf89","text":"<p><code>pysurprisal</code> lets you calculate the surprisal for words in a corpus of text, useful in NLP analysis.</p>"},{"location":"#what-is-surprisal","title":"What is surprisal? \ud83e\udd14","text":"<p>Surprisal is a metric showing how \"surprising\" it is that a word appears in a corpus of text. The concept comes from information theory, and is also referred to as entropy.</p> <p>More surprising words in a corpus of text have higher values.</p> <p>You can use surprisal to find uncommon and \"interesting\" words in a corpus of text.</p> <p>linguist.link uses <code>pysurprisal</code> to calculate surprisal for words in a corpus of New York Times articles.</p>"},{"location":"#installation","title":"Installation \ud83d\udee0\ufe0f","text":"<p>You can install <code>pysurprisal</code> using <code>pip</code>:</p> <pre><code>pip install pysurprisal\n</code></pre>"},{"location":"#quickstart","title":"Quickstart \ud83d\ude80","text":"<pre><code>from pysurprisal import Surprisal\n\ntext = \"...\"\n\n# calculate surprisal for each word in the text\ndata = Surprisal(text)\nsurprisals = data.calculate_surprisals()\n\n# get the top 10 most surprising words\ntop_k = data.get_top_k(10)\n\n# print dictionary of all surprisals\n# key = word, value = surprisal\nprint(surprisals.surprisals)\n</code></pre>"},{"location":"helpers/","title":"Surprisal Helper Functions","text":"<p>Compute the KL divergence between two probability distributions.</p> <p>Parameters:</p> Name Type Description Default <code>p</code> <code>dict</code> <p>The first probability distribution.</p> required <code>q</code> <code>dict</code> <p>The second probability distribution.</p> required <p>Returns:</p> Name Type Description <code>float</code> <code>float</code> <p>The KL divergence between the two probability distributions.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; p = {\"the\": 0.5, \"quick\": 0.25, \"brown\": 0.25}\n&gt;&gt;&gt; q = {\"the\": 0.25, \"quick\": 0.5, \"brown\": 0.25}\n&gt;&gt;&gt; print(compute_kl_divergence(p, q))\n0.17328679513998632\n</code></pre> Source code in <code>pysurprisal/core.py</code> <pre><code>def compute_kl_divergence(p: dict, q: dict) -&gt; float:\n\"\"\"\n    Compute the KL divergence between two probability distributions.\n\n    Args:\n        p (dict): The first probability distribution.\n        q (dict): The second probability distribution.\n\n    Returns:\n        float: The KL divergence between the two probability distributions.\n\n    Examples:\n        &gt;&gt;&gt; p = {\"the\": 0.5, \"quick\": 0.25, \"brown\": 0.25}\n        &gt;&gt;&gt; q = {\"the\": 0.25, \"quick\": 0.5, \"brown\": 0.25}\n        &gt;&gt;&gt; print(compute_kl_divergence(p, q))\n        0.17328679513998632\n    \"\"\"\n    return sum(rel_entr(p[word], q[word]) for word in p)\n</code></pre>"},{"location":"surprisal/","title":"Surprisal Class","text":"<p>A statistical implementation of surprisal.</p> Source code in <code>pysurprisal/core.py</code> <pre><code>class Surprisal:\n\"\"\"\n    A statistical implementation of surprisal.\n    \"\"\"\n    text: str\n    counts: dict\n    surprisals: dict\n    probabilities: dict\n\n    def __init__(self, text: str):\n        self.text = text\n        self.counts = self.get_word_frequencies(text)\n        self.surprisals = {}\n        self.probabilities = {}\n\n    def get_word_frequencies(self, text: str) -&gt; dict:\n\"\"\"\n        Get the word frequencies of a text.\n\n        Args:\n            text (str): The text to get the word frequencies of.\n\n        Returns:\n            dict: The word frequencies of the text.\n\n        Examples:\n            &gt;&gt;&gt; text = \"The quick brown fox jumps over the lazy dog.\"\n            &gt;&gt;&gt; surprisal = Surprisal(text)\n            &gt;&gt;&gt; print(surprisal.get_word_frequencies())\n            {'the': 2, 'quick': 1, ...}\n        \"\"\"\n        counts = Counter()\n\n        for word in text.lower().split():\n            counts[word] += 1\n\n        return counts\n\n    def calculate_surprisals(self, text: str = None) -&gt; dict:\n\"\"\"\n        Calculate the surprisals for each word in a text.\n\n        Args:\n            text (str, optional): The text on which to calculate the surprisals. Defaults to None.\n\n        Returns:\n            dict: The surprisals for each word in the text.\n\n        Examples:\n            &gt;&gt;&gt; text = \"The quick brown fox jumps over the lazy dog.\"\n            &gt;&gt;&gt; surprisal = Surprisal(text)\n            &gt;&gt;&gt; print(surprisal.calculate_surprisals())\n            {'the': 3.0910424533583156, 'quick': 3.784189633918261, 'brown': 3.784189633918261, 'fox': 3.784189633918261, \n            'jumps': 3.784189633918261, 'over': 3.784189633918261, 'lazy': 3.784189633918261, 'dog.': 3.784189633918261}\n        \"\"\"\n        if text is None:\n            text = self.text\n            counts = self.counts\n        else:\n            counts = self.get_word_frequencies(text)\n\n        surprisals = []\n        surprisals_as_dict = {}\n        probabilities = {}\n\n        for word in counts:\n            probabilities[word] = counts[word] / len(text)\n\n            surprisals.append(-math.log(probabilities[word]))\n            surprisals_as_dict[word] = -math.log(probabilities[word])\n\n        self.surprisals = surprisals_as_dict\n\n        return surprisals_as_dict\n\n    def get_top_k_surprisals(self, k: int = 10) -&gt; list:\n\"\"\"\n        Get the top k words in a text by surprisal.\n\n        Args:\n            k (int, optional): The number of words to return. Defaults to 10.\n\n        Returns:\n            list: The top k words in a text by surprisal.\n\n        Examples:\n            &gt;&gt;&gt; text = \"The quick brown fox jumps over the lazy dog.\"\n            &gt;&gt;&gt; surprisal = Surprisal(text)\n            &gt;&gt;&gt; surprisal.get_top_k_surprisals()\n            ['the', 'over', 'lazy', 'fox', 'jumps', 'dog.', 'quick', 'brown']\n        \"\"\"\n        if len(self.surprisals) == 0:\n            self.calculate_surprisals()\n\n        return sorted(self.surprisals, key=self.surprisals.get, reverse=True)[:k]\n</code></pre>"},{"location":"surprisal/#pysurprisal.core.Surprisal.calculate_surprisals","title":"<code>calculate_surprisals(text=None)</code>","text":"<p>Calculate the surprisals for each word in a text.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>The text on which to calculate the surprisals. Defaults to None.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>dict</code> <code>dict</code> <p>The surprisals for each word in the text.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; text = \"The quick brown fox jumps over the lazy dog.\"\n&gt;&gt;&gt; surprisal = Surprisal(text)\n&gt;&gt;&gt; print(surprisal.calculate_surprisals())\n{'the': 3.0910424533583156, 'quick': 3.784189633918261, 'brown': 3.784189633918261, 'fox': 3.784189633918261, \n'jumps': 3.784189633918261, 'over': 3.784189633918261, 'lazy': 3.784189633918261, 'dog.': 3.784189633918261}\n</code></pre> Source code in <code>pysurprisal/core.py</code> <pre><code>def calculate_surprisals(self, text: str = None) -&gt; dict:\n\"\"\"\n    Calculate the surprisals for each word in a text.\n\n    Args:\n        text (str, optional): The text on which to calculate the surprisals. Defaults to None.\n\n    Returns:\n        dict: The surprisals for each word in the text.\n\n    Examples:\n        &gt;&gt;&gt; text = \"The quick brown fox jumps over the lazy dog.\"\n        &gt;&gt;&gt; surprisal = Surprisal(text)\n        &gt;&gt;&gt; print(surprisal.calculate_surprisals())\n        {'the': 3.0910424533583156, 'quick': 3.784189633918261, 'brown': 3.784189633918261, 'fox': 3.784189633918261, \n        'jumps': 3.784189633918261, 'over': 3.784189633918261, 'lazy': 3.784189633918261, 'dog.': 3.784189633918261}\n    \"\"\"\n    if text is None:\n        text = self.text\n        counts = self.counts\n    else:\n        counts = self.get_word_frequencies(text)\n\n    surprisals = []\n    surprisals_as_dict = {}\n    probabilities = {}\n\n    for word in counts:\n        probabilities[word] = counts[word] / len(text)\n\n        surprisals.append(-math.log(probabilities[word]))\n        surprisals_as_dict[word] = -math.log(probabilities[word])\n\n    self.surprisals = surprisals_as_dict\n\n    return surprisals_as_dict\n</code></pre>"},{"location":"surprisal/#pysurprisal.core.Surprisal.get_top_k_surprisals","title":"<code>get_top_k_surprisals(k=10)</code>","text":"<p>Get the top k words in a text by surprisal.</p> <p>Parameters:</p> Name Type Description Default <code>k</code> <code>int</code> <p>The number of words to return. Defaults to 10.</p> <code>10</code> <p>Returns:</p> Name Type Description <code>list</code> <code>list</code> <p>The top k words in a text by surprisal.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; text = \"The quick brown fox jumps over the lazy dog.\"\n&gt;&gt;&gt; surprisal = Surprisal(text)\n&gt;&gt;&gt; surprisal.get_top_k_surprisals()\n['the', 'over', 'lazy', 'fox', 'jumps', 'dog.', 'quick', 'brown']\n</code></pre> Source code in <code>pysurprisal/core.py</code> <pre><code>def get_top_k_surprisals(self, k: int = 10) -&gt; list:\n\"\"\"\n    Get the top k words in a text by surprisal.\n\n    Args:\n        k (int, optional): The number of words to return. Defaults to 10.\n\n    Returns:\n        list: The top k words in a text by surprisal.\n\n    Examples:\n        &gt;&gt;&gt; text = \"The quick brown fox jumps over the lazy dog.\"\n        &gt;&gt;&gt; surprisal = Surprisal(text)\n        &gt;&gt;&gt; surprisal.get_top_k_surprisals()\n        ['the', 'over', 'lazy', 'fox', 'jumps', 'dog.', 'quick', 'brown']\n    \"\"\"\n    if len(self.surprisals) == 0:\n        self.calculate_surprisals()\n\n    return sorted(self.surprisals, key=self.surprisals.get, reverse=True)[:k]\n</code></pre>"},{"location":"surprisal/#pysurprisal.core.Surprisal.get_word_frequencies","title":"<code>get_word_frequencies(text)</code>","text":"<p>Get the word frequencies of a text.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>The text to get the word frequencies of.</p> required <p>Returns:</p> Name Type Description <code>dict</code> <code>dict</code> <p>The word frequencies of the text.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; text = \"The quick brown fox jumps over the lazy dog.\"\n&gt;&gt;&gt; surprisal = Surprisal(text)\n&gt;&gt;&gt; print(surprisal.get_word_frequencies())\n{'the': 2, 'quick': 1, ...}\n</code></pre> Source code in <code>pysurprisal/core.py</code> <pre><code>def get_word_frequencies(self, text: str) -&gt; dict:\n\"\"\"\n    Get the word frequencies of a text.\n\n    Args:\n        text (str): The text to get the word frequencies of.\n\n    Returns:\n        dict: The word frequencies of the text.\n\n    Examples:\n        &gt;&gt;&gt; text = \"The quick brown fox jumps over the lazy dog.\"\n        &gt;&gt;&gt; surprisal = Surprisal(text)\n        &gt;&gt;&gt; print(surprisal.get_word_frequencies())\n        {'the': 2, 'quick': 1, ...}\n    \"\"\"\n    counts = Counter()\n\n    for word in text.lower().split():\n        counts[word] += 1\n\n    return counts\n</code></pre>"}]}